// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  name           String?
  username       String?     @unique
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]

  onboarded      Boolean    @default(false)

  // Finance
  transactions   Transaction[]
  categories     Category[]
  preferences    UserPreferences?

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  categoryId    String?
  type          TransactionType   // INCOME or EXPENSE
  amount        Decimal
  currency      String            // Ex: "USD", "BRL", "EUR"
  description   String?
  date          DateTime          @default(now())

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Category {
  id          String            @id @default(cuid())
  userId      String
  name        String
  color       String?           // Ex: "#FF5733" (UI customization)
  icon        String?           // Ex: "shopping-cart"
  type        TransactionType   // INCOME or EXPENSE

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPreferences {
  id           String   @id @default(cuid())
  userId       String   @unique
  language     String   @default("")
  currency     String   @default("")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  INCOME
  EXPENSE
}